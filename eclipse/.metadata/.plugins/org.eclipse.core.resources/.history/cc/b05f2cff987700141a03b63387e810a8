package com.juanwan11_magicnation;

import java.util.Random;

import com.juanwan11_magicnation.blocks.MABlocks;

import net.minecraft.block.Block;
import net.minecraft.init.Blocks;
import net.minecraft.world.World;
import net.minecraft.world.chunk.IChunkProvider;
import net.minecraft.world.gen.feature.WorldGenMinable;
import cpw.mods.fml.common.IWorldGenerator;

public class OreMagicnationGenerator implements IWorldGenerator{

	@Override
	  public void generate(Random random, int chunkX, int chunkZ, World world, IChunkProvider chunkGenerator, IChunkProvider chunkProvider) {
        switch (world.provider.dimensionId) {
            case 0: GenerateOverworld(random, chunkX * 16, chunkZ * 16, world); break;
            case 1: GenerateEnd(random, chunkX * 16, chunkZ * 16, world); break;
            case -1: GenerateNether(random, chunkX * 16, chunkZ * 16, world); break;
        }
    }
 
	 private void GenerateOverworld(Random random, int x, int z, World world) {
		 																//MinVien MaxVien ChancesToSpawn MinY MaxY
		 this.addOreSpawn(Tutorial.tutorialBlock, world, random, x, z, 16, 16, 4 + random.nextInt(3), 5, 15, 50);
	 }
 
	 private void GenerateNether(World world, Random random, int x, int z)
	 {
	 int Xcoord = x + random.nextInt(16);
	     int Ycoord = 10 + random.nextInt(128);
	     int Zcoord = z + random.nextInt(16);
	     (new WorldGenMinable(MABlocks.oreGemStoneBlood, 1, 15, Blocks.netherrack)).generate(world, random, Xcoord, Ycoord, Zcoord);
	 }
 
    private void GenerateEnd(Random random, int x, int z, World world) {
    }
    
    /* This method adds our block to the world.
    * It randomizes the coordinates, and does that as many times, as defined in spawnChance.
    * Then it gives all the params to WorldGenMinable, which handles the replacing of the ores for us.
    * @param block The block you want to spawn
    * @param world The world
    * @param random The Random
    * @param blockXPos the blockXpos of a chunk
    * @param blockZPos the blockZpos of a chunk
    * @param minVeinSize min vein
    * @param maxVeinSize max vein
    * @param chancesToSpawn the chance to spawn. Usually around 2
    * @param minY lowest point to spawn
    * @param maxY highest point to spawn
    */
    public void addOreSpawn(Block block, World world, Random random, int blockXPos, int blockZPos, int maxX, int maxZ, int maxVeinSize, int chancesToSpawn, int minY, int maxY)
    {
    assert maxY > minY : "The maximum Y must be greater than the Minimum Y";
    assert maxX > 0 && maxX <= 16 : "addOreSpawn: The Maximum X must be greater than 0 and less than 16";
    assert minY > 0 : "addOreSpawn: The Minimum Y must be greater than 0";
    assert maxY < 256 && maxY > 0 : "addOreSpawn: The Maximum Y must be less than 256 but greater than 0";
    assert maxZ > 0 && maxZ <= 16 : "addOreSpawn: The Maximum Z must be greater than 0 and less than 16";
     
    int diffBtwnMinMaxY = maxY - minY;
    for (int x = 0; x < chancesToSpawn; x++)
    {
    int posX = blockXPos + random.nextInt(maxX);
    int posY = minY + random.nextInt(diffBtwnMinMaxY);
    int posZ = blockZPos + random.nextInt(maxZ);
    (new WorldGenMinable(block, maxVeinSize)).generate(world, random, posX, posY, posZ);
    }
  }
}